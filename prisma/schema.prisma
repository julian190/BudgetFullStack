generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  expenses      Expense[]
  incomes       Income[]
  budgetSetting BudgetSetting?
  auditLogs     AuditLog[]
  periods       Period[]
  budgetShares      BudgetShare[] @relation("Owner")
  sharedBudgets     BudgetShare[] @relation("SharedWith")
  expenseCategories ExpenseCategory[]
  months            Month[]
  accounts          Account[]
  sessions          Session[]
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  categoryId  String
  userId      String
  periodId    String
  
  category ExpenseCategory @relation(fields: [categoryId], references: [id])
  user     User            @relation(fields: [userId], references: [id])
  period   Period          @relation(fields: [periodId], references: [id])
}

model ExpenseCategory {
  id        String   @id @default(cuid())
  name      String
  budget    Float
  createdAt DateTime @default(now())
  userId    String
  monthId   String
  
  user     User     @relation(fields: [userId], references: [id])
  month    Month    @relation(fields: [monthId], references: [id])
  expenses Expense[]
}

model Month {
  id          String   @id @default(cuid())
  monthNumber Int
  year        Int
  userId      String
  
  user            User            @relation(fields: [userId], references: [id])
  expenseCategories ExpenseCategory[]
  periods          Period[]

  @@unique([userId, year, monthNumber], name: "user_month_unique")
}

model Income {
  id          String   @id @default(cuid())
  source      String
  amount      Decimal
  frequency   String
  date        DateTime
  userId      String
  
  user User @relation(fields: [userId], references: [id])
}

model Period {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  weekName  String
  userId    String
  monthId   String
  
  user     User     @relation(fields: [userId], references: [id])
  month    Month    @relation(fields: [monthId], references: [id])
  expenses Expense[]

  @@unique([userId, startDate, endDate], name: "user_period_unique")
}

model BudgetSetting {
  id          String   @id @default(cuid())
  userId      String   @unique
  ConfigName String
  ConfigValue String
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  details   String?
  userId    String
  createdAt DateTime @default(now())
  timestamp DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
}

model BudgetShare {
  id              String   @id @default(cuid())
  ownerId         String
  sharedWithUserId String
  createdAt       DateTime @default(now())
  
  owner         User   @relation("Owner", fields: [ownerId], references: [id])
  sharedWith    User   @relation("SharedWith", fields: [sharedWithUserId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
